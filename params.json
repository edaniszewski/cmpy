{"name":"cmpy","tagline":"A simple utility for detecting differences in directories and files.","body":"# cmpy\r\n[![License](https://pypip.in/license/cmpy/badge.svg)](https://pypi.python.org/pypi/cmpy/)\r\n[![Latest Version](https://pypip.in/version/cmpy/badge.svg)](https://pypi.python.org/pypi/cmpy/)\r\n[![Downloads](https://pypip.in/download/cmpy/badge.svg)](https://pypi.python.org/pypi/cmpy/)\r\n\r\nA simple utility for detecting differences in directories and files.\r\n\r\n### Installation\r\n\r\nYou can get cmpy with pip:\r\n\r\n```\r\npip install cmpy\r\n```\r\n\r\n### Overview\r\n\r\nComparison of files and directories in `cmpy` is handled with the `FCompare` and `DCompare` classes, respectively. Files\r\ncan also be compared using the static `shallow_fcmp()` and `deep_fcmp()` methods. As the names suggest, the former performs \r\na shallow comparison (less strict comparison, faster and less resource intensive), while the latter performs a deep comparison\r\n(strict comparison, slower, more resource intensive). \r\n\r\nFor additional information on the comparison methods and classes, see the docstring in `cmpy.py`.\r\n\r\n### Usage\r\n\r\n#### Comparing Files\r\n\r\n```python\r\n# Instantiate a file compare object between to files\r\nf = FCompare('foo/bar', 'bar/foo')\r\n\r\n# Compare the files (returns True or False)\r\nf.compare()\r\n```\r\n\r\nOptional arguments may be provided\r\n\r\n```python\r\n# Perform a shallow comparison (default behavior)\r\nf = FCompare('foo/bar', 'bar/foo', shallow=True)\r\n\r\n# Perform a deep comparison\r\nf = FCompare('foo/bar', 'bar/foo', shallow=False)\r\n\r\n# Change the default buffer size (for deep comparison). Default is 2**10 bytes\r\nf = FCompare('foo/bar', 'bar/foo', buffer_size=2**8)\r\n```\r\n\r\nFiles can also be compared without instantiating an object\r\n\r\n```python\r\n# Shallow comparison\r\nshallow_fcmp('foo/bar', 'bar/foo')\r\n\r\n# Deep comparison\r\ndeep_fcmp('foo/bar', 'bar/foo')\r\n\r\n# Deep comparison specifying buffer size\r\ndeep_fcmp('foo/bar', 'bar/foo', 2**8)\r\n```\r\n\r\n#### Comparing Directories:\r\n\r\n```python\r\n# Instantiate a directory compare object between to directories\r\nd = DCompare('foo/bar/', 'bar/foo/')\r\n\r\n# Compare the directories (returns True or False)\r\nd.compare()\r\n```\r\n\r\nOptional arguments may be provided\r\n\r\n```python\r\n# Perform a shallow comparison (default behavior)\r\nd = DCompare('foo/bar/', 'bar/foo/', shallow=True)\r\n\r\n# Perform a deep comparison\r\nd = DCompare('foo/bar/', 'bar/foo/', shallow=False)\r\n\r\n# Change the default buffer size (for deep comparison). Default is 2**10 bytes\r\nd = DCompare('foo/bar/', 'bar/foo/', buffer_size=2**8)\r\n\r\n# Perform a comparison non-recursively \r\nd = DCompare('foo/bar/', 'bar/foo/', recursive=False)\r\n\r\n# Perform a comparison recursively (default behavior)\r\nd = DCompare('foo/bar/', 'bar/foo/', recursive=True)\r\n```\r\n\r\nThe `DCompare` class has various properties on it\r\n\r\n```python\r\nd = DCompare('foo/bar/', 'bar/foo/')\r\n\r\n# The names of files in the first directory\r\nd.dir1_files\r\n\r\n# The names of directories in the first directory\r\nd.dir1_directories\r\n\r\n# The names of the entries in the first directory\r\nd.dir1_contents\r\n\r\n# The names of files in the second directory\r\nd.dir2_files\r\n\r\n# The names of directories in the second directory\r\nd.dir2_directories\r\n\r\n# The names of the entries in the second directory\r\nd.dir2_contents\r\n\r\n# The names of the entries in the first directory which are not in the second directory\r\nd.dir1_unique\r\n\r\n# The names of the entries in the second directory which are not in the first directory\r\nd.dir2_unique\r\n\r\n# The names of the entries found in both directories\r\nd.common\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}